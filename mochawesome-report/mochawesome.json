{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-27T03:37:43.105Z",
    "end": "2024-05-27T03:37:43.128Z",
    "duration": 23,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "356cf15c-f11b-4490-b801-ba0256829af2",
      "title": "",
      "fullFile": "C:\\Users\\adahi\\Documents\\GitLab\\Testing\\Unit-testing\\test\\numbers-validator\\isNumberEven.spec.js",
      "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a4cb44af-c49a-492b-948a-6968283f1087",
          "title": "isNumberEven",
          "fullFile": "C:\\Users\\adahi\\Documents\\GitLab\\Testing\\Unit-testing\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"before each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Instantiates a new NumbersValidator object before each test and assigns it to 'validator'\nvalidator = new NumbersValidator();",
              "err": {},
              "uuid": "eee9020c-9ce5-490d-8e51-33d30a1a65b9",
              "parentUUID": "a4cb44af-c49a-492b-948a-6968283f1087",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"after each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Sets the validator variable to null to clean up memory after each test\nvalidator = null;",
              "err": {},
              "uuid": "0ea448d3-e4b4-4d17-a0d5-ed602913b741",
              "parentUUID": "a4cb44af-c49a-492b-948a-6968283f1087",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if number is even",
              "fullTitle": "isNumberEven should return true if number is even",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Using 'expect' to assert that the 'isNumberEven' method returns true when\n// passed the even number 4. The '.to.be.equal(true)' is the actual assertion check.\nexpect(validator.isNumberEven(4)).to.be.equal(true);",
              "err": {},
              "uuid": "0e4936f7-bcd3-4b26-bcf3-21410633c8e5",
              "parentUUID": "a4cb44af-c49a-492b-948a-6968283f1087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(()=>{\n  validator.isNumberEven('5');\n}).to.throw('[5] is not of type \"Number\" it is of type \"string\"')",
              "err": {},
              "uuid": "8c4cbe48-72c8-4d39-ba25-c2b7abb320ec",
              "parentUUID": "a4cb44af-c49a-492b-948a-6968283f1087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers",
              "fullTitle": "isNumberEven should return an array of even numbers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [1,2,3,4,5,6];\nconst evenNumbersFromArray= validator.getEvenNumbersFromArray(arrayOfNumbers);\nexpect(evenNumbersFromArray).to.be.eql([2,4,6]);",
              "err": {},
              "uuid": "42e1c070-f014-4f14-a733-86b17d2b1557",
              "parentUUID": "a4cb44af-c49a-492b-948a-6968283f1087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if all the elements of the array are not numbers",
              "fullTitle": "isNumberEven should throw an error if all the elements of the array are not numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfElements = [1,2,'3',4,5,6];\nexpect(()=>{\n  validator.getEvenNumbersFromArray(arrayOfElements);\n}).to.throw('[1,2,3,4,5,6] is not an array of \"Numbers\"')",
              "err": {},
              "uuid": "39c2ff8a-7c3a-433b-bdaf-2a901e15ac3a",
              "parentUUID": "a4cb44af-c49a-492b-948a-6968283f1087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if not an array",
              "fullTitle": "isNumberEven should throw an error if not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const element = 4;\nexpect(()=>{\n  validator.isAllNumbers(element);\n}).to.throw('[4] is not an array')",
              "err": {},
              "uuid": "ff34e887-14b6-4a40-9de1-f44d223d321e",
              "parentUUID": "a4cb44af-c49a-492b-948a-6968283f1087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if all are numbers",
              "fullTitle": "isNumberEven should return true if all are numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isAllNumbers([2,4,6])).to.be.equal(true);",
              "err": {},
              "uuid": "45f0d1d3-dfef-4075-bde4-9eb8e87e040c",
              "parentUUID": "a4cb44af-c49a-492b-948a-6968283f1087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the value is not a number",
              "fullTitle": "isNumberEven should throw an error if the value is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = '8';\nexpect(()=>{\n  validator.isInteger(value);\n}).to.throw('[8] is not a number')",
              "err": {},
              "uuid": "d7facf34-9ac9-45a8-9375-eb7c625915d5",
              "parentUUID": "a4cb44af-c49a-492b-948a-6968283f1087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if value is a number",
              "fullTitle": "isNumberEven should return true if value is a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isInteger(5)).to.be.equal(true);",
              "err": {},
              "uuid": "fab638cb-6ea5-4119-baab-0a3a8d8df7fa",
              "parentUUID": "a4cb44af-c49a-492b-948a-6968283f1087",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e4936f7-bcd3-4b26-bcf3-21410633c8e5",
            "8c4cbe48-72c8-4d39-ba25-c2b7abb320ec",
            "42e1c070-f014-4f14-a733-86b17d2b1557",
            "39c2ff8a-7c3a-433b-bdaf-2a901e15ac3a",
            "ff34e887-14b6-4a40-9de1-f44d223d321e",
            "45f0d1d3-dfef-4075-bde4-9eb8e87e040c",
            "d7facf34-9ac9-45a8-9375-eb7c625915d5",
            "fab638cb-6ea5-4119-baab-0a3a8d8df7fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}