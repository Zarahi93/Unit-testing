{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-26T23:55:51.934Z",
    "end": "2024-05-26T23:55:51.972Z",
    "duration": 38,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3120de14-16a1-461c-b13c-252f9119b56b",
      "title": "",
      "fullFile": "C:\\Users\\adahi\\Documents\\GitLab\\Testing\\Unit-testing\\test\\numbers-validator\\isNumberEven.spec.js",
      "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0c021450-a850-4bba-b4ea-efae97cb74ee",
          "title": "isNumberEven",
          "fullFile": "C:\\Users\\adahi\\Documents\\GitLab\\Testing\\Unit-testing\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"before each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Instantiates a new NumbersValidator object before each test and assigns it to 'validator'\nvalidator = new NumbersValidator();",
              "err": {},
              "uuid": "d6ce2066-80f8-498e-9ca8-d97c50183bba",
              "parentUUID": "0c021450-a850-4bba-b4ea-efae97cb74ee",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"after each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Sets the validator variable to null to clean up memory after each test\nvalidator = null;",
              "err": {},
              "uuid": "927faefb-5ab0-4fc1-9947-c32830bf0d27",
              "parentUUID": "0c021450-a850-4bba-b4ea-efae97cb74ee",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if number is even",
              "fullTitle": "isNumberEven should return true if number is even",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Using 'expect' to assert that the 'isNumberEven' method returns true when\n// passed the even number 4. The '.to.be.equal(true)' is the actual assertion check.\nexpect(validator.isNumberEven(4)).to.be.equal(true);",
              "err": {},
              "uuid": "bbe69e5b-812f-43db-bca9-13205e5b337e",
              "parentUUID": "0c021450-a850-4bba-b4ea-efae97cb74ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven should throw an error when provided a string",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(()=>{\n  validator.isNumberEven('5');\n}).to.throw('[5] is not of type \"Number\" it is of type \"string\"')",
              "err": {},
              "uuid": "6a33501d-9dfa-45c2-865e-9873c9bf276f",
              "parentUUID": "0c021450-a850-4bba-b4ea-efae97cb74ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers",
              "fullTitle": "isNumberEven should return an array of even numbers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [1,2,3,4,5,6];\nconst evenNumbersFromArray= validator.getEvenNumbersFromArray(arrayOfNumbers);\nexpect(evenNumbersFromArray).to.be.eql([2,4,6]);",
              "err": {},
              "uuid": "f85202a4-d904-4646-ae77-b5f9ba4e056e",
              "parentUUID": "0c021450-a850-4bba-b4ea-efae97cb74ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if all the elements of the array are not numbers",
              "fullTitle": "isNumberEven should throw an error if all the elements of the array are not numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfElements = [1,2,'3',4,5,6];\nexpect(()=>{\n  validator.getEvenNumbersFromArray(arrayOfElements);\n}).to.throw('[1,2,3,4,5,6] is not an array of \"Numbers\"')",
              "err": {},
              "uuid": "f93e9844-b13c-47da-8faf-1a56e986670b",
              "parentUUID": "0c021450-a850-4bba-b4ea-efae97cb74ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if not an array",
              "fullTitle": "isNumberEven should throw an error if not an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const element = 4;\nexpect(()=>{\n  validator.isAllNumbers(element);\n}).to.throw('[4] is not an array')",
              "err": {},
              "uuid": "72d43400-c535-48f6-81ae-c959b4ce63bd",
              "parentUUID": "0c021450-a850-4bba-b4ea-efae97cb74ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if all are numbers",
              "fullTitle": "isNumberEven should return true if all are numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isAllNumbers([2,4,6])).to.be.equal(true);",
              "err": {},
              "uuid": "14c4053c-c59d-43f2-9821-8dada36dd99c",
              "parentUUID": "0c021450-a850-4bba-b4ea-efae97cb74ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bbe69e5b-812f-43db-bca9-13205e5b337e",
            "6a33501d-9dfa-45c2-865e-9873c9bf276f",
            "f85202a4-d904-4646-ae77-b5f9ba4e056e",
            "f93e9844-b13c-47da-8faf-1a56e986670b",
            "72d43400-c535-48f6-81ae-c959b4ce63bd",
            "14c4053c-c59d-43f2-9821-8dada36dd99c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}